name: Build then Deploy to Pinata
# run run on merge
on:
  push:
    branches:
      - develop
      - testnet
      - master
      - slack-webhook

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # for some reason this appears unavailable in github API... might be missing something?
      - name: capture branch name to env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/slack-webhook' ]]; then
            echo "CURRENT_BRANCH=develop" >> $GITHUB_ENV
          fi

          if [[ $GITHUB_REF == 'refs/heads/master' ]]; then
            echo "CURRENT_BRANCH=master" >> $GITHUB_ENV
          fi

          if [[ $GITHUB_REF == 'refs/heads/testnet' ]]; then
            echo "CURRENT_BRANCH=testnet" >> $GITHUB_ENV
          fi
      - name: capture image name to env
        run: |
          echo "IMAGE_NAME=ghcr.io/sifchain/sifnode/ui-stack:$CURRENT_BRANCH" >> $GITHUB_ENV

      - name: Use Node.js
        uses: actions/setup-node@v2.1.4
        with:
          node-version: "14.x"

      # We need to extract shared resources from sifnode to include in our build mainly ABI files and testing tables
      - name: Log into registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull instant stack image
        run: docker pull $IMAGE_NAME

      - name: Extracting ABIs
        run: cd ./ui && yarn install --frozen-lockfile --silent && yarn stack --setup-only --tag $CURRENT_BRANCH

      - name: Build App
        run: |
          cd ui && yarn install --frozen-lockfile && yarn build --tag $CURRENT_BRANCH

      # Can't save envs between jobs so using artifacts
      - name: Save package meta
        run: |
          mkdir -p ./ui/app/dist;
          echo $CURRENT_BRANCH > ./ui/app/dist/.branch; 
          echo $IMAGE_NAME > ./ui/app/dist/.image

      - uses: actions/upload-artifact@master
        with:
          name: fe-build-artifact-${{ github.sha }}
          path: ./ui/app/dist

  # test:
  #   needs: build

  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ui

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2

  #     - name: Download artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: fe-build-artifact-${{ github.sha }}
  #         # note this path doesnt take working-directory in account
  #         path: ./ui/app/dist

  #     - name: Extract package meta
  #       run: |
  #         echo "CURRENT_BRANCH=$(cat ./app/dist/.branch)" >> $GITHUB_ENV;
  #         echo "IMAGE_NAME=$(cat ./app/dist/.image)" >> $GITHUB_ENV;

  #     - name: Use Node.js
  #       uses: actions/setup-node@v2.1.4
  #       with:
  #         node-version: "14.x"

  #     - name: Log into registry
  #       run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #     - name: Pull instant stack image
  #       run: docker pull $IMAGE_NAME

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile --silent

  #     - uses: microsoft/playwright-github-action@v1

  #     - name: Build e2e App
  #       run: cd e2e && yarn install --frozen-lockfile

  #     - name: Run e2e Tests
  #       run: yarn build --tag $CURRENT_BRANCH && yarn e2e --tag $CURRENT_BRANCH
  #       env:
  #         CI: true

  #     - name: Upload coverage report
  #       uses: codecov/codecov-action@v1
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         directory: ./e2e/coverage
  #         flags: ui
  #         verbose: true

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: fe-build-artifact-${{ github.sha }}
          path: ./ui/app/dist

      - name: Deploy App to IPFS/Pinata
        id: pinata
        uses: anantaramdas/ipfs-pinata-deploy-action@v1.6.4
        with:
          pin-name: "Sifchain ${{ github.sha }}"
          path: "./ui/app/dist"
          pinata-api-key: ${{ secrets.PINATA_API_KEY }}
          pinata-secret-api-key: ${{ secrets.PINATA_SECRET_KEY }}
          verbose: true
          remove-old: true

      - name: Set environment for dnslink
        run: |
          echo $GITHUB_REF

          if [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "Config set for DevNet deployment"
            echo "RECORD_DOMAIN=sifchain.finance" >> $GITHUB_ENV
            echo "RECORD_NAME=_dnslink.devnet" >> $GITHUB_ENV
          fi

          if [[ $GITHUB_REF == 'refs/heads/testnet' ]]; then
            echo "Config set for TestNet deployment"
            echo "RECORD_DOMAIN=sifchain.finance" >> $GITHUB_ENV
            echo "RECORD_NAME=_dnslink.testnet" >> $GITHUB_ENV
          fi

          if [[ $GITHUB_REF == 'refs/heads/master' ]]; then
            echo "Config set for MainNet deployment"
            echo "RECORD_DOMAIN=sifchain.finance" >> $GITHUB_ENV
            echo "RECORD_NAME=_dnslink.dex" >> $GITHUB_ENV
          fi

      # - name: Update cloudflare DNSLink
      #   env:
      #     CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      #     CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_TOKEN_ZONE_ID }}
      #   id: dnslink
      #   uses: textileio/cloudflare-update-dnslink@master
      #   with:
      #     cid: ${{ steps.pinata.outputs.hash }}

      # - name: Write Code Comment
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     message: |
      #       VUE_APP_DEPLOYMENT_TAG: ${{ env.VUE_APP_DEPLOYMENT_TAG }} \
      #       IPFS Hash: ${{ steps.pinata.outputs.hash }}\
      #       URL: <https://sifchain.mypinata.cloud/ipfs/${{ steps.pinata.outputs.hash }}>
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-token-user-login: "github-actions[bot]"
      #     allow-repeats: false
      - name: Extract branch name
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: extract_branch

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.14.0
        with:
          payload: "{\"url\":\"<https://sifchain.mypinata.cloud/ipfs/${{ steps.pinata.outputs.hash }}|Pinata URL>\",
          \"github_ref\":\"${{github.ref}}\",\"github_hash\": \"${{ steps.extract_branch.outputs.branch }}\", \"test\": \"test\", 
          \"env_url\": \"<https://${{ steps.extract_branch.outputs.branch }}.sifchain.finance|Sifchain URL>\" }"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}